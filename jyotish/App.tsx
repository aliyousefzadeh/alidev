
import React, { useState, useCallback } from 'react';
import { Language, Birthday, CalendarType } from './types';
import { LanguageSelector } from './components/LanguageSelector';
import { BirthdayForm } from './components/BirthdayForm';
import { AstrologyReport } from './components/AstrologyReport';
import { LoadingSpinner } from './components/LoadingSpinner';
import { StarIcon } from './components/icons';
import { generateVedicReport } from './services/geminiService';

type AppStep = 'LANGUAGE' | 'BIRTHDAY' | 'GENERATING' | 'REPORT' | 'ERROR';

const App: React.FC = () => {
  const [step, setStep] = useState<AppStep>('LANGUAGE');
  const [language, setLanguage] = useState<Language | null>(null);
  const [birthday, setBirthday] = useState<Birthday | null>(null);
  const [report, setReport] = useState<string>('');
  const [error, setError] = useState<string>('');

  const handleLanguageSelect = useCallback((selectedLanguage: Language) => {
    setLanguage(selectedLanguage);
    setStep('BIRTHDAY');
  }, []);

  const handleBirthdaySubmit = async (selectedBirthday: Birthday) => {
    setBirthday(selectedBirthday);
    setStep('GENERATING');
    
    const calendarType: CalendarType = selectedBirthday.year < 1500 ? 'Persian' : 'Gregorian';

    try {
      if (!language) {
        throw new Error("Language not selected.");
      }
      const generatedReport = await generateVedicReport(language, selectedBirthday, calendarType);
      if (generatedReport.startsWith('Failed to generate astrology report.')) {
        throw new Error(generatedReport);
      }
      setReport(generatedReport);
      setStep('REPORT');
    } catch (err: any) {
      setError(err.message || 'An unexpected error occurred.');
      setStep('ERROR');
    }
  };

  const handleReset = useCallback(() => {
    setStep('LANGUAGE');
    setLanguage(null);
    setBirthday(null);
    setReport('');
    setError('');
  }, []);

  const handleBackToLanguage = useCallback(() => {
      setStep('LANGUAGE');
  }, []);
  
  const handleBackToBirthday = useCallback(() => {
      setStep('BIRTHDAY');
  }, []);

  const renderStep = () => {
    switch (step) {
      case 'LANGUAGE':
        return <LanguageSelector onSelectLanguage={handleLanguageSelect} />;
      case 'BIRTHDAY':
        return <BirthdayForm onSubmit={handleBirthdaySubmit} onBack={handleBackToLanguage} />;
      case 'GENERATING':
        return <LoadingSpinner />;
      case 'REPORT':
        return <AstrologyReport report={report} onReset={handleReset} />;
      case 'ERROR':
        return (
          <div className="text-center max-w-md mx-auto">
            <h2 className="text-3xl font-bold text-red-400 mb-4">An Error Occurred</h2>
            <p className="text-gray-300 bg-red-500/20 p-4 rounded-lg mb-6">{error}</p>
            <button
              onClick={handleBackToBirthday}
              className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-colors"
            >
              Try Again
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen w-full flex flex-col items-center justify-center p-4 sm:p-6 relative overflow-hidden">
      <div className="absolute top-0 left-0 -translate-x-1/3 -translate-y-1/3 w-96 h-96 bg-purple-600/30 rounded-full blur-3xl animate-pulse"></div>
      <div className="absolute bottom-0 right-0 translate-x-1/3 translate-y-1/3 w-96 h-96 bg-indigo-600/30 rounded-full blur-3xl animate-pulse delay-1000"></div>

      <header className="absolute top-0 left-0 right-0 p-6 flex justify-center">
        <div className="flex items-center space-x-3 text-white/80">
          <StarIcon className="w-8 h-8 text-yellow-300" />
          <h1 className="text-2xl font-bold tracking-wider">Vedic Astrology AI</h1>
        </div>
      </header>

      <main className="w-full z-10">
        {renderStep()}
      </main>
      
      <footer className="absolute bottom-4 text-center text-xs text-white/40">
        <p>Generated by Gemini. For entertainment purposes only.</p>
      </footer>
    </div>
  );
};

export default App;
